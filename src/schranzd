#!/usr/bin/env python
# -*- coding: utf-8 -*-

import getopt
import os
import signal
import sys
import syslog
from traceback import print_exc

from schranz.util import get_group, get_user
from schranz.daemon import SchranzDaemon

def main(argv):
    shortargs = 'ds:p:'
    longargs = ('daemon', 'socket=', 'pidfile=')

    try:
        opts, _ = getopt.getopt(sys.argv[1:], shortargs, longargs)
    except getopt.error:
        print >> sys.stderr, 'schranzd [-d|--daemon [-p|--pidfile=FILE]] [-s|--socket=FILE]'
        return 1

    pidfile = '/var/run/schranz/schranzd.pid'
    socket_file = '/var/run/schranz/schranz.sock'
    daemonize = False

    for o, v in opts:
        # optparse sucks cock, hard
        daemonize = o in ('-d', '--daemon')
        if o in ('-s', '--socket'):
            pidfile = v
        if o in ('-p', '--pidfile'):
            socket_file = v
    
    try:
        os.setgid(get_group(name = 'schranz').gr_gid)
    except:
        print >> sys.stderr, 'Cannot change group. Daemon will run as group %s.' % get_group(gid = os.getgid()).gr_name

    try:
        os.setuid(get_user(name = 'schranz').pw_uid)
    except:
        print >> sys.stderr, 'Cannot change user. Daemon will run as user %s.' % get_user(uid = os.getuid()).pw_name

    if daemonize:
        try:
            pid = os.fork()
            if pid:
                sys.exit(0)
        except OSError, e:
            print >> sys.stderr, 'Could not daemonize: %s' % os.strerror(e.errno)
            return 1

        f = open(pidfile, 'w')
        try:
            f.write(str(os.getpid()))
        except EnvironmentError, e:
            # We shouldn't print anything after fork, but oh well...
            print >> sys.stderr, 'Could not write pidfile: %s' % os.strerror(e.errno)
            return 1
        finally:
            f.close()

    syslog.openlog(logopt=syslog.LOG_PID, facility=syslog.LOG_DAEMON)

    daemon = SchranzDaemon(socket_file = socket_file)
    
    def handler(i, j):
        daemon.stop()

    signal.signal(signal.SIGQUIT, handler)
    signal.signal(signal.SIGTERM, handler)

    try:
        daemon.run()
    except KeyboardInterrupt:
        daemon.stop()
    except:
        print_exc()
        return 1

    return 0

if __name__ == '__main__':
    argv = list(sys.argv)
    code = main(argv)
    sys.exit(code or 0)

